[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "daffi"
description = "Daffi is fast, simple and lightweight library for inter process communication"
readme = "README.md"
requires-python = ">=3.8"
license = "MIT"
keywords = ["rpc", "task", "queue", "job", "async", "python", "distributed", "stream", "grpc"]
authors = [
  { name = "Volodymyr Boiko", email = "600apples@gmail.com" },
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Topic :: Internet",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Object Brokering",
    "Topic :: Software Development :: Testing",
    "Topic :: System :: Clustering",
    "Topic :: System :: Distributed Computing",
    "Topic :: System :: Monitoring",
    "Topic :: System :: Networking",
    "Topic :: System :: Systems Administration",
]
dependencies = [
    "anyio>=3.6.2",
    "dill>=0.3.6",
    "grpcio>=1.51.3",
    "protobuf>=4.21.12",
    "tenacity>=8.1.0",
    "typing_extensions>=4.4.0",
    "tblib>=1.7.0",
    "cachetools>=5.3.0",
    "cached-property>=1.5.2",
    "uvloop>=0.17.0; sys.platform != 'win32'",
    "colorama>=0.4.6; sys.platform == 'win32'"
]
dynamic = [
    "version",
]

[project.urls]
Documentation = "https://600apples.github.io/dafi/"
Source = "https://github.com/600apples/dafi"

[tool.hatch.version]
path = "daffi/__about__.py"

[tool.hatch.envs.default.overrides]
env.GITHUB_ACTIONS.env-vars = "COVERAGE_REPORT="

[tool.hatch.envs.default]
dependencies = [
    "pytest",
    "pytest-cov",
    "pytest-asyncio==0.20.3",
    "Jinja2==3.1.2",
    "trio==0.22.0",
    "grpcio-tools==1.51.1",
    "types-protobuf==4.21.0.2",
]
[tool.hatch.envs.default.scripts]
cov = "export DAFFI_DEBUG=True && pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=daffi --cov-report=html --cov=tests -s -vv {args}"
cov_git = "export DAFFI_DEBUG=True && pytest --cov=daffi --cov-report={env:COVERAGE_REPORT:term-missing} --cov-config=pyproject.toml -s -vv -x"
no_cov = "pytest -vv {args}"
compile = "python -m grpc_tools.protoc -I daffi/components/proto --python_out=daffi/components/proto --grpc_python_out=daffi/components/proto messager.proto"

[tool.hatch.envs.docs]
dependencies = [
    "mkdocs==1.4.2",
    "mkdocs-material==8.5.9",
    "mkdocs-section-index==0.3.4",
    "mkdocs-with-pdf==0.9.3",
    "mkdocstrings-python==0.8.3",
]
[tool.hatch.envs.docs.scripts]
build = "mkdocs build --clean --strict"
serve = "mkdocs serve --dev-addr localhost:8000"
deploy = "mkdocs gh-deploy --force"

[tool.hatch.envs.lint]
detached = true
dependencies = [
  "black>=22.6.0",
  "mypy>=0.990",
  "ruff>=0.0.176",
]
[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:backend/src/hatchling src/hatch tests}"
style = [
  "ruff {args:.}",
  "black --check --diff {args:.}",
]
fmt = [
  "black {args:.}",
  "ruff --fix {args:.}",
  "style",
]
all = [
  "style",
  "typing",
]

[[tool.hatch.envs.test.matrix]]
python = ["38", "39", "310", "311"]

[tool.hatch.envs.coverage]
detached = true
dependencies = [
  "coverage[toml]>=6.2",
   "lxml",
]

[tool.hatch.envs.coverage.scripts]
combine = "coverage combine {args}"
report-xml = "coverage xml"
report-json = "coverage json"
report-uncovered-html = "coverage html --skip-covered --skip-empty"
generate-summary = "python scripts/generate_coverage_summary.py"
write-summary-report = "python scripts/write_coverage_summary_report.py"

[tool.coverage.run]
branch = true
parallel = true
omit = [
  "daffi/__about__.py",
  "daffi/components/proto/messager_pb2.py", # Generated by grpc-tools
  "daffi/components/proto/messager_pb2_grpc.py", # Generated by grpc-tools
  "tests/*",
]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]
ignore_errors = true


[tool.black]
line-length = 120
